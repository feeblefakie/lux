// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_update_2dprotocol_2eproto__INCLUDED
#define PROTOBUF_update_2dprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2000003
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2000003 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

namespace Lux {
namespace Protocol {

// Internal implementation detail -- do not call these.
void  protobuf_BuildDesc_update_2dprotocol_2eproto();
void protobuf_BuildDesc_update_2dprotocol_2eproto_AssignGlobalDescriptors(
    ::google::protobuf::FileDescriptor* file);

class Field;
class Document;
class Update;
class Updates;

enum Update_UpdateType {
  Update_UpdateType_ADD = 0,
  Update_UpdateType_DELETE = 1,
  Update_UpdateType_ALTER = 2
};
const ::google::protobuf::EnumDescriptor* Update_UpdateType_descriptor();
bool Update_UpdateType_IsValid(int value);
const Update_UpdateType Update_UpdateType_UpdateType_MIN = Update_UpdateType_ADD;
const Update_UpdateType Update_UpdateType_UpdateType_MAX = Update_UpdateType_ALTER;

// ===================================================================

class Field : public ::google::protobuf::Message {
 public:
  Field();
  virtual ~Field();
  
  Field(const Field& from);
  
  inline Field& operator=(const Field& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Field& default_instance();
  void Swap(Field* other);
  
  // implements Message ----------------------------------------------
  
  Field* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline ::std::string* mutable_name();
  
  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline ::std::string* mutable_value();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  friend void protobuf_BuildDesc_update_2dprotocol_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Field* default_instance_;
};
// -------------------------------------------------------------------

class Document : public ::google::protobuf::Message {
 public:
  Document();
  virtual ~Document();
  
  Document(const Document& from);
  
  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Document& default_instance();
  void Swap(Document* other);
  
  // implements Message ----------------------------------------------
  
  Document* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline ::std::string* mutable_id();
  
  // repeated .Lux.Protocol.Field field = 2;
  inline int field_size() const;
  inline void clear_field();
  inline const ::google::protobuf::RepeatedPtrField< ::Lux::Protocol::Field >& field() const;
  inline ::google::protobuf::RepeatedPtrField< ::Lux::Protocol::Field >* mutable_field();
  inline const ::Lux::Protocol::Field& field(int index) const;
  inline ::Lux::Protocol::Field* mutable_field(int index);
  inline ::Lux::Protocol::Field* add_field();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  ::google::protobuf::RepeatedPtrField< ::Lux::Protocol::Field > field_;
  friend void protobuf_BuildDesc_update_2dprotocol_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Document* default_instance_;
};
// -------------------------------------------------------------------

class Update : public ::google::protobuf::Message {
 public:
  Update();
  virtual ~Update();
  
  Update(const Update& from);
  
  inline Update& operator=(const Update& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Update& default_instance();
  void Swap(Update* other);
  
  // implements Message ----------------------------------------------
  
  Update* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  typedef Update_UpdateType UpdateType;
  static const UpdateType ADD = Update_UpdateType_ADD;
  static const UpdateType DELETE = Update_UpdateType_DELETE;
  static const UpdateType ALTER = Update_UpdateType_ALTER;
  static inline const ::google::protobuf::EnumDescriptor*
  UpdateType_descriptor() {
    return Update_UpdateType_descriptor();
  }
  static inline bool UpdateType_IsValid(int value) {
    return Update_UpdateType_IsValid(value);
  }
  static const UpdateType UpdateType_MIN =
    Update_UpdateType_UpdateType_MIN;
  static const UpdateType UpdateType_MAX =
    Update_UpdateType_UpdateType_MAX;
  
  // accessors -------------------------------------------------------
  
  // required .Lux.Protocol.Document document = 1;
  inline bool has_document() const;
  inline void clear_document();
  inline const ::Lux::Protocol::Document& document() const;
  inline ::Lux::Protocol::Document* mutable_document();
  
  // required .Lux.Protocol.Update.UpdateType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  inline ::Lux::Protocol::Update_UpdateType type() const;
  inline void set_type(::Lux::Protocol::Update_UpdateType value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::Lux::Protocol::Document* document_;
  int type_;
  friend void protobuf_BuildDesc_update_2dprotocol_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Update* default_instance_;
};
// -------------------------------------------------------------------

class Updates : public ::google::protobuf::Message {
 public:
  Updates();
  virtual ~Updates();
  
  Updates(const Updates& from);
  
  inline Updates& operator=(const Updates& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Updates& default_instance();
  void Swap(Updates* other);
  
  // implements Message ----------------------------------------------
  
  Updates* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Lux.Protocol.Update update = 1;
  inline int update_size() const;
  inline void clear_update();
  inline const ::google::protobuf::RepeatedPtrField< ::Lux::Protocol::Update >& update() const;
  inline ::google::protobuf::RepeatedPtrField< ::Lux::Protocol::Update >* mutable_update();
  inline const ::Lux::Protocol::Update& update(int index) const;
  inline ::Lux::Protocol::Update* mutable_update(int index);
  inline ::Lux::Protocol::Update* add_update();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::Lux::Protocol::Update > update_;
  friend void protobuf_BuildDesc_update_2dprotocol_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Updates* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// Field

// required string name = 1;
inline bool Field::has_name() const {
  return _has_bit(0);
}
inline void Field::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Field::name() const {
  return *name_;
}
inline void Field::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Field::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline ::std::string* Field::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required string value = 2;
inline bool Field::has_value() const {
  return _has_bit(1);
}
inline void Field::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Field::value() const {
  return *value_;
}
inline void Field::set_value(const ::std::string& value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Field::set_value(const char* value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline ::std::string* Field::mutable_value() {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}

// -------------------------------------------------------------------

// Document

// required string id = 1;
inline bool Document::has_id() const {
  return _has_bit(0);
}
inline void Document::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Document::id() const {
  return *id_;
}
inline void Document::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Document::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline ::std::string* Document::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// repeated .Lux.Protocol.Field field = 2;
inline int Document::field_size() const {
  return field_.size();
}
inline void Document::clear_field() {
  field_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::Lux::Protocol::Field >&
Document::field() const {
  return field_;
}
inline ::google::protobuf::RepeatedPtrField< ::Lux::Protocol::Field >*
Document::mutable_field() {
  return &field_;
}
inline const ::Lux::Protocol::Field& Document::field(int index) const {
  return field_.Get(index);
}
inline ::Lux::Protocol::Field* Document::mutable_field(int index) {
  return field_.Mutable(index);
}
inline ::Lux::Protocol::Field* Document::add_field() {
  return field_.Add();
}

// -------------------------------------------------------------------

// Update

// required .Lux.Protocol.Document document = 1;
inline bool Update::has_document() const {
  return _has_bit(0);
}
inline void Update::clear_document() {
  if (document_ != NULL) document_->::Lux::Protocol::Document::Clear();
  _clear_bit(0);
}
inline const ::Lux::Protocol::Document& Update::document() const {
  return document_ != NULL ? *document_ : *default_instance_->document_;
}
inline ::Lux::Protocol::Document* Update::mutable_document() {
  _set_bit(0);
  if (document_ == NULL) document_ = new ::Lux::Protocol::Document;
  return document_;
}

// required .Lux.Protocol.Update.UpdateType type = 2;
inline bool Update::has_type() const {
  return _has_bit(1);
}
inline void Update::clear_type() {
  type_ = 0;
  _clear_bit(1);
}
inline ::Lux::Protocol::Update_UpdateType Update::type() const {
  return static_cast< ::Lux::Protocol::Update_UpdateType >(type_);
}
inline void Update::set_type(::Lux::Protocol::Update_UpdateType value) {
  GOOGLE_DCHECK(::Lux::Protocol::Update_UpdateType_IsValid(value));
  _set_bit(1);
  type_ = value;
}

// -------------------------------------------------------------------

// Updates

// repeated .Lux.Protocol.Update update = 1;
inline int Updates::update_size() const {
  return update_.size();
}
inline void Updates::clear_update() {
  update_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::Lux::Protocol::Update >&
Updates::update() const {
  return update_;
}
inline ::google::protobuf::RepeatedPtrField< ::Lux::Protocol::Update >*
Updates::mutable_update() {
  return &update_;
}
inline const ::Lux::Protocol::Update& Updates::update(int index) const {
  return update_.Get(index);
}
inline ::Lux::Protocol::Update* Updates::mutable_update(int index) {
  return update_.Mutable(index);
}
inline ::Lux::Protocol::Update* Updates::add_update() {
  return update_.Add();
}


}  // namespace Protocol
}  // namespace Lux
#endif  // PROTOBUF_update_2dprotocol_2eproto__INCLUDED
