// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_document_5fdefinition_2eproto__INCLUDED
#define PROTOBUF_document_5fdefinition_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2000003
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2000003 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

namespace Lux {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_BuildDesc_document_5fdefinition_2eproto();
void protobuf_BuildDesc_document_5fdefinition_2eproto_AssignGlobalDescriptors(
    ::google::protobuf::FileDescriptor* file);

class Field;
class Field_Index;
class Field_AttrIndex;
class Document;

enum Field_AttrIndexType {
  Field_AttrIndexType_STRING = 0,
  Field_AttrIndexType_INT = 1
};
const ::google::protobuf::EnumDescriptor* Field_AttrIndexType_descriptor();
bool Field_AttrIndexType_IsValid(int value);
const Field_AttrIndexType Field_AttrIndexType_AttrIndexType_MIN = Field_AttrIndexType_STRING;
const Field_AttrIndexType Field_AttrIndexType_AttrIndexType_MAX = Field_AttrIndexType_INT;

// ===================================================================

class Field_Index : public ::google::protobuf::Message {
 public:
  Field_Index();
  virtual ~Field_Index();
  
  Field_Index(const Field_Index& from);
  
  inline Field_Index& operator=(const Field_Index& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Field_Index& default_instance();
  void Swap(Field_Index* other);
  
  // implements Message ----------------------------------------------
  
  Field_Index* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool indexing = 1;
  inline bool has_indexing() const;
  inline void clear_indexing();
  inline bool indexing() const;
  inline void set_indexing(bool value);
  
  // required string index_to = 2 [default = "default"];
  inline bool has_index_to() const;
  inline void clear_index_to();
  inline const ::std::string& index_to() const;
  inline void set_index_to(const ::std::string& value);
  inline void set_index_to(const char* value);
  inline ::std::string* mutable_index_to();
  
  // optional bool exact = 3 [default = false];
  inline bool has_exact() const;
  inline void clear_exact();
  inline bool exact() const;
  inline void set_exact(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool indexing_;
  ::std::string* index_to_;
  static const ::std::string _default_index_to_;
  bool exact_;
  friend void protobuf_BuildDesc_document_5fdefinition_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Field_Index* default_instance_;
};
// -------------------------------------------------------------------

class Field_AttrIndex : public ::google::protobuf::Message {
 public:
  Field_AttrIndex();
  virtual ~Field_AttrIndex();
  
  Field_AttrIndex(const Field_AttrIndex& from);
  
  inline Field_AttrIndex& operator=(const Field_AttrIndex& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Field_AttrIndex& default_instance();
  void Swap(Field_AttrIndex* other);
  
  // implements Message ----------------------------------------------
  
  Field_AttrIndex* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool indexing = 1 [default = false];
  inline bool has_indexing() const;
  inline void clear_indexing();
  inline bool indexing() const;
  inline void set_indexing(bool value);
  
  // required .Lux.Config.Field.AttrIndexType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  inline ::Lux::Config::Field_AttrIndexType type() const;
  inline void set_type(::Lux::Config::Field_AttrIndexType value);
  
  // required uint32 size = 3;
  inline bool has_size() const;
  inline void clear_size();
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool indexing_;
  int type_;
  ::google::protobuf::uint32 size_;
  friend void protobuf_BuildDesc_document_5fdefinition_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Field_AttrIndex* default_instance_;
};
// -------------------------------------------------------------------

class Field : public ::google::protobuf::Message {
 public:
  Field();
  virtual ~Field();
  
  Field(const Field& from);
  
  inline Field& operator=(const Field& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Field& default_instance();
  void Swap(Field* other);
  
  // implements Message ----------------------------------------------
  
  Field* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  typedef Field_Index Index;
  typedef Field_AttrIndex AttrIndex;
  
  typedef Field_AttrIndexType AttrIndexType;
  static const AttrIndexType STRING = Field_AttrIndexType_STRING;
  static const AttrIndexType INT = Field_AttrIndexType_INT;
  static inline const ::google::protobuf::EnumDescriptor*
  AttrIndexType_descriptor() {
    return Field_AttrIndexType_descriptor();
  }
  static inline bool AttrIndexType_IsValid(int value) {
    return Field_AttrIndexType_IsValid(value);
  }
  static const AttrIndexType AttrIndexType_MIN =
    Field_AttrIndexType_AttrIndexType_MIN;
  static const AttrIndexType AttrIndexType_MAX =
    Field_AttrIndexType_AttrIndexType_MAX;
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline ::std::string* mutable_name();
  
  // optional .Lux.Config.Field.Index index = 2;
  inline bool has_index() const;
  inline void clear_index();
  inline const ::Lux::Config::Field_Index& index() const;
  inline ::Lux::Config::Field_Index* mutable_index();
  
  // optional bool display = 3 [default = false];
  inline bool has_display() const;
  inline void clear_display();
  inline bool display() const;
  inline void set_display(bool value);
  
  // optional .Lux.Config.Field.AttrIndex attr_index = 4;
  inline bool has_attr_index() const;
  inline void clear_attr_index();
  inline const ::Lux::Config::Field_AttrIndex& attr_index() const;
  inline ::Lux::Config::Field_AttrIndex* mutable_attr_index();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::Lux::Config::Field_Index* index_;
  bool display_;
  ::Lux::Config::Field_AttrIndex* attr_index_;
  friend void protobuf_BuildDesc_document_5fdefinition_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Field* default_instance_;
};
// -------------------------------------------------------------------

class Document : public ::google::protobuf::Message {
 public:
  Document();
  virtual ~Document();
  
  Document(const Document& from);
  
  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Document& default_instance();
  void Swap(Document* other);
  
  // implements Message ----------------------------------------------
  
  Document* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Lux.Config.Field field = 1;
  inline int field_size() const;
  inline void clear_field();
  inline const ::google::protobuf::RepeatedPtrField< ::Lux::Config::Field >& field() const;
  inline ::google::protobuf::RepeatedPtrField< ::Lux::Config::Field >* mutable_field();
  inline const ::Lux::Config::Field& field(int index) const;
  inline ::Lux::Config::Field* mutable_field(int index);
  inline ::Lux::Config::Field* add_field();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::Lux::Config::Field > field_;
  friend void protobuf_BuildDesc_document_5fdefinition_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Document* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// Field_Index

// required bool indexing = 1;
inline bool Field_Index::has_indexing() const {
  return _has_bit(0);
}
inline void Field_Index::clear_indexing() {
  indexing_ = false;
  _clear_bit(0);
}
inline bool Field_Index::indexing() const {
  return indexing_;
}
inline void Field_Index::set_indexing(bool value) {
  _set_bit(0);
  indexing_ = value;
}

// required string index_to = 2 [default = "default"];
inline bool Field_Index::has_index_to() const {
  return _has_bit(1);
}
inline void Field_Index::clear_index_to() {
  if (index_to_ != &_default_index_to_) {
    index_to_->assign(_default_index_to_);
  }
  _clear_bit(1);
}
inline const ::std::string& Field_Index::index_to() const {
  return *index_to_;
}
inline void Field_Index::set_index_to(const ::std::string& value) {
  _set_bit(1);
  if (index_to_ == &_default_index_to_) {
    index_to_ = new ::std::string;
  }
  index_to_->assign(value);
}
inline void Field_Index::set_index_to(const char* value) {
  _set_bit(1);
  if (index_to_ == &_default_index_to_) {
    index_to_ = new ::std::string;
  }
  index_to_->assign(value);
}
inline ::std::string* Field_Index::mutable_index_to() {
  _set_bit(1);
  if (index_to_ == &_default_index_to_) {
    index_to_ = new ::std::string(_default_index_to_);
  }
  return index_to_;
}

// optional bool exact = 3 [default = false];
inline bool Field_Index::has_exact() const {
  return _has_bit(2);
}
inline void Field_Index::clear_exact() {
  exact_ = false;
  _clear_bit(2);
}
inline bool Field_Index::exact() const {
  return exact_;
}
inline void Field_Index::set_exact(bool value) {
  _set_bit(2);
  exact_ = value;
}

// -------------------------------------------------------------------

// Field_AttrIndex

// required bool indexing = 1 [default = false];
inline bool Field_AttrIndex::has_indexing() const {
  return _has_bit(0);
}
inline void Field_AttrIndex::clear_indexing() {
  indexing_ = false;
  _clear_bit(0);
}
inline bool Field_AttrIndex::indexing() const {
  return indexing_;
}
inline void Field_AttrIndex::set_indexing(bool value) {
  _set_bit(0);
  indexing_ = value;
}

// required .Lux.Config.Field.AttrIndexType type = 2;
inline bool Field_AttrIndex::has_type() const {
  return _has_bit(1);
}
inline void Field_AttrIndex::clear_type() {
  type_ = 0;
  _clear_bit(1);
}
inline ::Lux::Config::Field_AttrIndexType Field_AttrIndex::type() const {
  return static_cast< ::Lux::Config::Field_AttrIndexType >(type_);
}
inline void Field_AttrIndex::set_type(::Lux::Config::Field_AttrIndexType value) {
  GOOGLE_DCHECK(::Lux::Config::Field_AttrIndexType_IsValid(value));
  _set_bit(1);
  type_ = value;
}

// required uint32 size = 3;
inline bool Field_AttrIndex::has_size() const {
  return _has_bit(2);
}
inline void Field_AttrIndex::clear_size() {
  size_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 Field_AttrIndex::size() const {
  return size_;
}
inline void Field_AttrIndex::set_size(::google::protobuf::uint32 value) {
  _set_bit(2);
  size_ = value;
}

// -------------------------------------------------------------------

// Field

// required string name = 1;
inline bool Field::has_name() const {
  return _has_bit(0);
}
inline void Field::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Field::name() const {
  return *name_;
}
inline void Field::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Field::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline ::std::string* Field::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional .Lux.Config.Field.Index index = 2;
inline bool Field::has_index() const {
  return _has_bit(1);
}
inline void Field::clear_index() {
  if (index_ != NULL) index_->::Lux::Config::Field_Index::Clear();
  _clear_bit(1);
}
inline const ::Lux::Config::Field_Index& Field::index() const {
  return index_ != NULL ? *index_ : *default_instance_->index_;
}
inline ::Lux::Config::Field_Index* Field::mutable_index() {
  _set_bit(1);
  if (index_ == NULL) index_ = new ::Lux::Config::Field_Index;
  return index_;
}

// optional bool display = 3 [default = false];
inline bool Field::has_display() const {
  return _has_bit(2);
}
inline void Field::clear_display() {
  display_ = false;
  _clear_bit(2);
}
inline bool Field::display() const {
  return display_;
}
inline void Field::set_display(bool value) {
  _set_bit(2);
  display_ = value;
}

// optional .Lux.Config.Field.AttrIndex attr_index = 4;
inline bool Field::has_attr_index() const {
  return _has_bit(3);
}
inline void Field::clear_attr_index() {
  if (attr_index_ != NULL) attr_index_->::Lux::Config::Field_AttrIndex::Clear();
  _clear_bit(3);
}
inline const ::Lux::Config::Field_AttrIndex& Field::attr_index() const {
  return attr_index_ != NULL ? *attr_index_ : *default_instance_->attr_index_;
}
inline ::Lux::Config::Field_AttrIndex* Field::mutable_attr_index() {
  _set_bit(3);
  if (attr_index_ == NULL) attr_index_ = new ::Lux::Config::Field_AttrIndex;
  return attr_index_;
}

// -------------------------------------------------------------------

// Document

// repeated .Lux.Config.Field field = 1;
inline int Document::field_size() const {
  return field_.size();
}
inline void Document::clear_field() {
  field_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::Lux::Config::Field >&
Document::field() const {
  return field_;
}
inline ::google::protobuf::RepeatedPtrField< ::Lux::Config::Field >*
Document::mutable_field() {
  return &field_;
}
inline const ::Lux::Config::Field& Document::field(int index) const {
  return field_.Get(index);
}
inline ::Lux::Config::Field* Document::mutable_field(int index) {
  return field_.Mutable(index);
}
inline ::Lux::Config::Field* Document::add_field() {
  return field_.Add();
}


}  // namespace Config
}  // namespace Lux
#endif  // PROTOBUF_document_5fdefinition_2eproto__INCLUDED
