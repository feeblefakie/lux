// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lux/dist/server-config.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Lux {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* Server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Server_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cluster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cluster_reflection_ = NULL;
const ::google::protobuf::Descriptor* Clusters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Clusters_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProxyMerger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProxyMerger_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProxyMergers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProxyMergers_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dispatcher_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dispatcher_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dispatchers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dispatchers_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lux_2fdist_2fserver_2dconfig_2eproto() {
  protobuf_AddDesc_lux_2fdist_2fserver_2dconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lux/dist/server-config.proto");
  GOOGLE_CHECK(file != NULL);
  Server_descriptor_ = file->message_type(0);
  static const int Server_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, num_default_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, num_max_),
  };
  Server_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Server_descriptor_,
      Server::default_instance_,
      Server_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Server));
  Cluster_descriptor_ = file->message_type(1);
  static const int Cluster_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, server_),
  };
  Cluster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cluster_descriptor_,
      Cluster::default_instance_,
      Cluster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cluster));
  Clusters_descriptor_ = file->message_type(2);
  static const int Clusters_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clusters, cluster_),
  };
  Clusters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Clusters_descriptor_,
      Clusters::default_instance_,
      Clusters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clusters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clusters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Clusters));
  ProxyMerger_descriptor_ = file->message_type(3);
  static const int ProxyMerger_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyMerger, cluster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyMerger, merger_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyMerger, server_),
  };
  ProxyMerger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProxyMerger_descriptor_,
      ProxyMerger::default_instance_,
      ProxyMerger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyMerger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyMerger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProxyMerger));
  ProxyMergers_descriptor_ = file->message_type(4);
  static const int ProxyMergers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyMergers, proxy_merger_),
  };
  ProxyMergers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProxyMergers_descriptor_,
      ProxyMergers::default_instance_,
      ProxyMergers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyMergers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyMergers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProxyMergers));
  Dispatcher_descriptor_ = file->message_type(5);
  static const int Dispatcher_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dispatcher, cluster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dispatcher, merger_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dispatcher, server_),
  };
  Dispatcher_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dispatcher_descriptor_,
      Dispatcher::default_instance_,
      Dispatcher_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dispatcher, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dispatcher, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dispatcher));
  Dispatchers_descriptor_ = file->message_type(6);
  static const int Dispatchers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dispatchers, dispatcher_),
  };
  Dispatchers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dispatchers_descriptor_,
      Dispatchers::default_instance_,
      Dispatchers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dispatchers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dispatchers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dispatchers));
  ServerConfig_descriptor_ = file->message_type(7);
  static const int ServerConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, clusters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, dispatchers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, proxy_mergers_),
  };
  ServerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerConfig_descriptor_,
      ServerConfig::default_instance_,
      ServerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lux_2fdist_2fserver_2dconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Server_descriptor_, &Server::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cluster_descriptor_, &Cluster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Clusters_descriptor_, &Clusters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProxyMerger_descriptor_, &ProxyMerger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProxyMergers_descriptor_, &ProxyMergers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dispatcher_descriptor_, &Dispatcher::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dispatchers_descriptor_, &Dispatchers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerConfig_descriptor_, &ServerConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lux_2fdist_2fserver_2dconfig_2eproto() {
  delete Server::default_instance_;
  delete Server_reflection_;
  delete Cluster::default_instance_;
  delete Cluster_reflection_;
  delete Clusters::default_instance_;
  delete Clusters_reflection_;
  delete ProxyMerger::default_instance_;
  delete ProxyMerger_reflection_;
  delete ProxyMergers::default_instance_;
  delete ProxyMergers_reflection_;
  delete Dispatcher::default_instance_;
  delete Dispatcher_reflection_;
  delete Dispatchers::default_instance_;
  delete Dispatchers_reflection_;
  delete ServerConfig::default_instance_;
  delete ServerConfig_reflection_;
}

void protobuf_AddDesc_lux_2fdist_2fserver_2dconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034lux/dist/server-config.proto\022\nLux.Conf"
    "ig\"^\n\006Server\022\n\n\002id\030\001 \002(\r\022\014\n\004host\030\002 \002(\t\022\014"
    "\n\004port\030\003 \002(\r\022\027\n\013num_default\030\004 \001(\r:\00210\022\023\n"
    "\007num_max\030\005 \001(\r:\00230\"9\n\007Cluster\022\n\n\002id\030\001 \002("
    "\r\022\"\n\006server\030\002 \003(\0132\022.Lux.Config.Server\"0\n"
    "\010Clusters\022$\n\007cluster\030\001 \003(\0132\023.Lux.Config."
    "Cluster\"X\n\013ProxyMerger\022\022\n\ncluster_id\030\001 \003"
    "(\r\022\021\n\tmerger_id\030\002 \003(\r\022\"\n\006server\030\003 \002(\0132\022."
    "Lux.Config.Server\"=\n\014ProxyMergers\022-\n\014pro"
    "xy_merger\030\001 \003(\0132\027.Lux.Config.ProxyMerger"
    "\"W\n\nDispatcher\022\022\n\ncluster_id\030\001 \001(\r\022\021\n\tme"
    "rger_id\030\002 \003(\r\022\"\n\006server\030\003 \002(\0132\022.Lux.Conf"
    "ig.Server\"9\n\013Dispatchers\022*\n\ndispatcher\030\001"
    " \003(\0132\026.Lux.Config.Dispatcher\"\225\001\n\014ServerC"
    "onfig\022&\n\010clusters\030\001 \002(\0132\024.Lux.Config.Clu"
    "sters\022,\n\013dispatchers\030\002 \001(\0132\027.Lux.Config."
    "Dispatchers\022/\n\rproxy_mergers\030\003 \001(\0132\030.Lux"
    ".Config.ProxyMergers", 700);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lux/dist/server-config.proto", &protobuf_RegisterTypes);
  Server::default_instance_ = new Server();
  Cluster::default_instance_ = new Cluster();
  Clusters::default_instance_ = new Clusters();
  ProxyMerger::default_instance_ = new ProxyMerger();
  ProxyMergers::default_instance_ = new ProxyMergers();
  Dispatcher::default_instance_ = new Dispatcher();
  Dispatchers::default_instance_ = new Dispatchers();
  ServerConfig::default_instance_ = new ServerConfig();
  Server::default_instance_->InitAsDefaultInstance();
  Cluster::default_instance_->InitAsDefaultInstance();
  Clusters::default_instance_->InitAsDefaultInstance();
  ProxyMerger::default_instance_->InitAsDefaultInstance();
  ProxyMergers::default_instance_->InitAsDefaultInstance();
  Dispatcher::default_instance_->InitAsDefaultInstance();
  Dispatchers::default_instance_->InitAsDefaultInstance();
  ServerConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lux_2fdist_2fserver_2dconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lux_2fdist_2fserver_2dconfig_2eproto {
  StaticDescriptorInitializer_lux_2fdist_2fserver_2dconfig_2eproto() {
    protobuf_AddDesc_lux_2fdist_2fserver_2dconfig_2eproto();
  }
} static_descriptor_initializer_lux_2fdist_2fserver_2dconfig_2eproto_;


// ===================================================================

const ::std::string Server::_default_host_;
#ifndef _MSC_VER
const int Server::kIdFieldNumber;
const int Server::kHostFieldNumber;
const int Server::kPortFieldNumber;
const int Server::kNumDefaultFieldNumber;
const int Server::kNumMaxFieldNumber;
#endif  // !_MSC_VER

Server::Server()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Server::InitAsDefaultInstance() {
}

Server::Server(const Server& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Server::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  host_ = const_cast< ::std::string*>(&_default_host_);
  port_ = 0u;
  num_default_ = 10u;
  num_max_ = 30u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Server::~Server() {
  SharedDtor();
}

void Server::SharedDtor() {
  if (host_ != &_default_host_) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Server_descriptor_;
}

const Server& Server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lux_2fdist_2fserver_2dconfig_2eproto();  return *default_instance_;
}

Server* Server::default_instance_ = NULL;

Server* Server::New() const {
  return new Server;
}

void Server::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (_has_bit(1)) {
      if (host_ != &_default_host_) {
        host_->clear();
      }
    }
    port_ = 0u;
    num_default_ = 10u;
    num_max_ = 30u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_host;
        break;
      }
      
      // required string host = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }
      
      // required uint32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_default;
        break;
      }
      
      // optional uint32 num_default = 4 [default = 10];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_default:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_default_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num_max;
        break;
      }
      
      // optional uint32 num_max = 5 [default = 30];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_max_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required string host = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->host(), output);
  }
  
  // required uint32 port = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }
  
  // optional uint32 num_default = 4 [default = 10];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_default(), output);
  }
  
  // optional uint32 num_max = 5 [default = 30];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_max(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Server::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required string host = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host(), target);
  }
  
  // required uint32 port = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }
  
  // optional uint32 num_default = 4 [default = 10];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_default(), target);
  }
  
  // optional uint32 num_max = 5 [default = 30];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_max(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Server::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required string host = 2;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // required uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }
    
    // optional uint32 num_default = 4 [default = 10];
    if (has_num_default()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_default());
    }
    
    // optional uint32 num_max = 5 [default = 30];
    if (has_num_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_max());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Server::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Server* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Server*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Server::MergeFrom(const Server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_host(from.host());
    }
    if (from._has_bit(2)) {
      set_port(from.port());
    }
    if (from._has_bit(3)) {
      set_num_default(from.num_default());
    }
    if (from._has_bit(4)) {
      set_num_max(from.num_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Server::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server::CopyFrom(const Server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Server::Swap(Server* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(num_default_, other->num_default_);
    std::swap(num_max_, other->num_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Server_descriptor_;
  metadata.reflection = Server_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cluster::kIdFieldNumber;
const int Cluster::kServerFieldNumber;
#endif  // !_MSC_VER

Cluster::Cluster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cluster::InitAsDefaultInstance() {
}

Cluster::Cluster(const Cluster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cluster::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cluster::~Cluster() {
  SharedDtor();
}

void Cluster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cluster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cluster_descriptor_;
}

const Cluster& Cluster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lux_2fdist_2fserver_2dconfig_2eproto();  return *default_instance_;
}

Cluster* Cluster::default_instance_ = NULL;

Cluster* Cluster::New() const {
  return new Cluster;
}

void Cluster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  server_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server;
        break;
      }
      
      // repeated .Lux.Config.Server server = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // repeated .Lux.Config.Server server = 2;
  for (int i = 0; i < this->server_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->server(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cluster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // repeated .Lux.Config.Server server = 2;
  for (int i = 0; i < this->server_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->server(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cluster::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  // repeated .Lux.Config.Server server = 2;
  total_size += 1 * this->server_size();
  for (int i = 0; i < this->server_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cluster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cluster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cluster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cluster::MergeFrom(const Cluster& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_.MergeFrom(from.server_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cluster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cluster::CopyFrom(const Cluster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cluster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < server_size(); i++) {
    if (!this->server(i).IsInitialized()) return false;
  }
  return true;
}

void Cluster::Swap(Cluster* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    server_.Swap(&other->server_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cluster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cluster_descriptor_;
  metadata.reflection = Cluster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Clusters::kClusterFieldNumber;
#endif  // !_MSC_VER

Clusters::Clusters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Clusters::InitAsDefaultInstance() {
}

Clusters::Clusters(const Clusters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Clusters::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Clusters::~Clusters() {
  SharedDtor();
}

void Clusters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Clusters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Clusters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Clusters_descriptor_;
}

const Clusters& Clusters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lux_2fdist_2fserver_2dconfig_2eproto();  return *default_instance_;
}

Clusters* Clusters::default_instance_ = NULL;

Clusters* Clusters::New() const {
  return new Clusters;
}

void Clusters::Clear() {
  cluster_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Clusters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Lux.Config.Cluster cluster = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cluster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cluster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cluster;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Clusters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Lux.Config.Cluster cluster = 1;
  for (int i = 0; i < this->cluster_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cluster(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Clusters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Lux.Config.Cluster cluster = 1;
  for (int i = 0; i < this->cluster_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cluster(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Clusters::ByteSize() const {
  int total_size = 0;
  
  // repeated .Lux.Config.Cluster cluster = 1;
  total_size += 1 * this->cluster_size();
  for (int i = 0; i < this->cluster_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cluster(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Clusters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Clusters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Clusters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Clusters::MergeFrom(const Clusters& from) {
  GOOGLE_CHECK_NE(&from, this);
  cluster_.MergeFrom(from.cluster_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Clusters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clusters::CopyFrom(const Clusters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clusters::IsInitialized() const {
  
  for (int i = 0; i < cluster_size(); i++) {
    if (!this->cluster(i).IsInitialized()) return false;
  }
  return true;
}

void Clusters::Swap(Clusters* other) {
  if (other != this) {
    cluster_.Swap(&other->cluster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Clusters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Clusters_descriptor_;
  metadata.reflection = Clusters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProxyMerger::kClusterIdFieldNumber;
const int ProxyMerger::kMergerIdFieldNumber;
const int ProxyMerger::kServerFieldNumber;
#endif  // !_MSC_VER

ProxyMerger::ProxyMerger()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProxyMerger::InitAsDefaultInstance() {
  server_ = const_cast< ::Lux::Config::Server*>(&::Lux::Config::Server::default_instance());
}

ProxyMerger::ProxyMerger(const ProxyMerger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProxyMerger::SharedCtor() {
  _cached_size_ = 0;
  server_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProxyMerger::~ProxyMerger() {
  SharedDtor();
}

void ProxyMerger::SharedDtor() {
  if (this != default_instance_) {
    delete server_;
  }
}

void ProxyMerger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProxyMerger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProxyMerger_descriptor_;
}

const ProxyMerger& ProxyMerger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lux_2fdist_2fserver_2dconfig_2eproto();  return *default_instance_;
}

ProxyMerger* ProxyMerger::default_instance_ = NULL;

ProxyMerger* ProxyMerger::New() const {
  return new ProxyMerger;
}

void ProxyMerger::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (_has_bit(2)) {
      if (server_ != NULL) server_->::Lux::Config::Server::Clear();
    }
  }
  cluster_id_.Clear();
  merger_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProxyMerger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 cluster_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cluster_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_cluster_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cluster_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cluster_id;
        if (input->ExpectTag(16)) goto parse_merger_id;
        break;
      }
      
      // repeated uint32 merger_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_merger_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_merger_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_merger_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_merger_id;
        if (input->ExpectTag(26)) goto parse_server;
        break;
      }
      
      // required .Lux.Config.Server server = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProxyMerger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 cluster_id = 1;
  for (int i = 0; i < this->cluster_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->cluster_id(i), output);
  }
  
  // repeated uint32 merger_id = 2;
  for (int i = 0; i < this->merger_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->merger_id(i), output);
  }
  
  // required .Lux.Config.Server server = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->server(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProxyMerger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 cluster_id = 1;
  for (int i = 0; i < this->cluster_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->cluster_id(i), target);
  }
  
  // repeated uint32 merger_id = 2;
  for (int i = 0; i < this->merger_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->merger_id(i), target);
  }
  
  // required .Lux.Config.Server server = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->server(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProxyMerger::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required .Lux.Config.Server server = 3;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server());
    }
    
  }
  // repeated uint32 cluster_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cluster_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cluster_id(i));
    }
    total_size += 1 * this->cluster_id_size() + data_size;
  }
  
  // repeated uint32 merger_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->merger_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->merger_id(i));
    }
    total_size += 1 * this->merger_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProxyMerger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProxyMerger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProxyMerger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProxyMerger::MergeFrom(const ProxyMerger& from) {
  GOOGLE_CHECK_NE(&from, this);
  cluster_id_.MergeFrom(from.cluster_id_);
  merger_id_.MergeFrom(from.merger_id_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from._has_bit(2)) {
      mutable_server()->::Lux::Config::Server::MergeFrom(from.server());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProxyMerger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProxyMerger::CopyFrom(const ProxyMerger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyMerger::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  if (has_server()) {
    if (!this->server().IsInitialized()) return false;
  }
  return true;
}

void ProxyMerger::Swap(ProxyMerger* other) {
  if (other != this) {
    cluster_id_.Swap(&other->cluster_id_);
    merger_id_.Swap(&other->merger_id_);
    std::swap(server_, other->server_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProxyMerger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProxyMerger_descriptor_;
  metadata.reflection = ProxyMerger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProxyMergers::kProxyMergerFieldNumber;
#endif  // !_MSC_VER

ProxyMergers::ProxyMergers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProxyMergers::InitAsDefaultInstance() {
}

ProxyMergers::ProxyMergers(const ProxyMergers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProxyMergers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProxyMergers::~ProxyMergers() {
  SharedDtor();
}

void ProxyMergers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProxyMergers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProxyMergers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProxyMergers_descriptor_;
}

const ProxyMergers& ProxyMergers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lux_2fdist_2fserver_2dconfig_2eproto();  return *default_instance_;
}

ProxyMergers* ProxyMergers::default_instance_ = NULL;

ProxyMergers* ProxyMergers::New() const {
  return new ProxyMergers;
}

void ProxyMergers::Clear() {
  proxy_merger_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProxyMergers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Lux.Config.ProxyMerger proxy_merger = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proxy_merger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proxy_merger()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_proxy_merger;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProxyMergers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Lux.Config.ProxyMerger proxy_merger = 1;
  for (int i = 0; i < this->proxy_merger_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->proxy_merger(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProxyMergers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Lux.Config.ProxyMerger proxy_merger = 1;
  for (int i = 0; i < this->proxy_merger_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->proxy_merger(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProxyMergers::ByteSize() const {
  int total_size = 0;
  
  // repeated .Lux.Config.ProxyMerger proxy_merger = 1;
  total_size += 1 * this->proxy_merger_size();
  for (int i = 0; i < this->proxy_merger_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proxy_merger(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProxyMergers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProxyMergers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProxyMergers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProxyMergers::MergeFrom(const ProxyMergers& from) {
  GOOGLE_CHECK_NE(&from, this);
  proxy_merger_.MergeFrom(from.proxy_merger_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProxyMergers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProxyMergers::CopyFrom(const ProxyMergers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyMergers::IsInitialized() const {
  
  for (int i = 0; i < proxy_merger_size(); i++) {
    if (!this->proxy_merger(i).IsInitialized()) return false;
  }
  return true;
}

void ProxyMergers::Swap(ProxyMergers* other) {
  if (other != this) {
    proxy_merger_.Swap(&other->proxy_merger_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProxyMergers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProxyMergers_descriptor_;
  metadata.reflection = ProxyMergers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dispatcher::kClusterIdFieldNumber;
const int Dispatcher::kMergerIdFieldNumber;
const int Dispatcher::kServerFieldNumber;
#endif  // !_MSC_VER

Dispatcher::Dispatcher()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dispatcher::InitAsDefaultInstance() {
  server_ = const_cast< ::Lux::Config::Server*>(&::Lux::Config::Server::default_instance());
}

Dispatcher::Dispatcher(const Dispatcher& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dispatcher::SharedCtor() {
  _cached_size_ = 0;
  cluster_id_ = 0u;
  server_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dispatcher::~Dispatcher() {
  SharedDtor();
}

void Dispatcher::SharedDtor() {
  if (this != default_instance_) {
    delete server_;
  }
}

void Dispatcher::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dispatcher::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dispatcher_descriptor_;
}

const Dispatcher& Dispatcher::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lux_2fdist_2fserver_2dconfig_2eproto();  return *default_instance_;
}

Dispatcher* Dispatcher::default_instance_ = NULL;

Dispatcher* Dispatcher::New() const {
  return new Dispatcher;
}

void Dispatcher::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cluster_id_ = 0u;
    if (_has_bit(2)) {
      if (server_ != NULL) server_->::Lux::Config::Server::Clear();
    }
  }
  merger_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dispatcher::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cluster_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cluster_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_merger_id;
        break;
      }
      
      // repeated uint32 merger_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_merger_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_merger_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_merger_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_merger_id;
        if (input->ExpectTag(26)) goto parse_server;
        break;
      }
      
      // required .Lux.Config.Server server = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dispatcher::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cluster_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cluster_id(), output);
  }
  
  // repeated uint32 merger_id = 2;
  for (int i = 0; i < this->merger_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->merger_id(i), output);
  }
  
  // required .Lux.Config.Server server = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->server(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dispatcher::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cluster_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cluster_id(), target);
  }
  
  // repeated uint32 merger_id = 2;
  for (int i = 0; i < this->merger_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->merger_id(i), target);
  }
  
  // required .Lux.Config.Server server = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->server(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dispatcher::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cluster_id = 1;
    if (has_cluster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cluster_id());
    }
    
    // required .Lux.Config.Server server = 3;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server());
    }
    
  }
  // repeated uint32 merger_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->merger_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->merger_id(i));
    }
    total_size += 1 * this->merger_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dispatcher::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dispatcher* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dispatcher*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dispatcher::MergeFrom(const Dispatcher& from) {
  GOOGLE_CHECK_NE(&from, this);
  merger_id_.MergeFrom(from.merger_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_cluster_id(from.cluster_id());
    }
    if (from._has_bit(2)) {
      mutable_server()->::Lux::Config::Server::MergeFrom(from.server());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dispatcher::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dispatcher::CopyFrom(const Dispatcher& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dispatcher::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  if (has_server()) {
    if (!this->server().IsInitialized()) return false;
  }
  return true;
}

void Dispatcher::Swap(Dispatcher* other) {
  if (other != this) {
    std::swap(cluster_id_, other->cluster_id_);
    merger_id_.Swap(&other->merger_id_);
    std::swap(server_, other->server_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dispatcher::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dispatcher_descriptor_;
  metadata.reflection = Dispatcher_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dispatchers::kDispatcherFieldNumber;
#endif  // !_MSC_VER

Dispatchers::Dispatchers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dispatchers::InitAsDefaultInstance() {
}

Dispatchers::Dispatchers(const Dispatchers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dispatchers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dispatchers::~Dispatchers() {
  SharedDtor();
}

void Dispatchers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dispatchers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dispatchers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dispatchers_descriptor_;
}

const Dispatchers& Dispatchers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lux_2fdist_2fserver_2dconfig_2eproto();  return *default_instance_;
}

Dispatchers* Dispatchers::default_instance_ = NULL;

Dispatchers* Dispatchers::New() const {
  return new Dispatchers;
}

void Dispatchers::Clear() {
  dispatcher_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dispatchers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Lux.Config.Dispatcher dispatcher = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dispatcher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dispatcher()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dispatcher;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dispatchers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Lux.Config.Dispatcher dispatcher = 1;
  for (int i = 0; i < this->dispatcher_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dispatcher(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dispatchers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Lux.Config.Dispatcher dispatcher = 1;
  for (int i = 0; i < this->dispatcher_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dispatcher(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dispatchers::ByteSize() const {
  int total_size = 0;
  
  // repeated .Lux.Config.Dispatcher dispatcher = 1;
  total_size += 1 * this->dispatcher_size();
  for (int i = 0; i < this->dispatcher_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dispatcher(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dispatchers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dispatchers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dispatchers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dispatchers::MergeFrom(const Dispatchers& from) {
  GOOGLE_CHECK_NE(&from, this);
  dispatcher_.MergeFrom(from.dispatcher_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dispatchers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dispatchers::CopyFrom(const Dispatchers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dispatchers::IsInitialized() const {
  
  for (int i = 0; i < dispatcher_size(); i++) {
    if (!this->dispatcher(i).IsInitialized()) return false;
  }
  return true;
}

void Dispatchers::Swap(Dispatchers* other) {
  if (other != this) {
    dispatcher_.Swap(&other->dispatcher_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dispatchers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dispatchers_descriptor_;
  metadata.reflection = Dispatchers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerConfig::kClustersFieldNumber;
const int ServerConfig::kDispatchersFieldNumber;
const int ServerConfig::kProxyMergersFieldNumber;
#endif  // !_MSC_VER

ServerConfig::ServerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerConfig::InitAsDefaultInstance() {
  clusters_ = const_cast< ::Lux::Config::Clusters*>(&::Lux::Config::Clusters::default_instance());
  dispatchers_ = const_cast< ::Lux::Config::Dispatchers*>(&::Lux::Config::Dispatchers::default_instance());
  proxy_mergers_ = const_cast< ::Lux::Config::ProxyMergers*>(&::Lux::Config::ProxyMergers::default_instance());
}

ServerConfig::ServerConfig(const ServerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerConfig::SharedCtor() {
  _cached_size_ = 0;
  clusters_ = NULL;
  dispatchers_ = NULL;
  proxy_mergers_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerConfig::~ServerConfig() {
  SharedDtor();
}

void ServerConfig::SharedDtor() {
  if (this != default_instance_) {
    delete clusters_;
    delete dispatchers_;
    delete proxy_mergers_;
  }
}

void ServerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerConfig_descriptor_;
}

const ServerConfig& ServerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lux_2fdist_2fserver_2dconfig_2eproto();  return *default_instance_;
}

ServerConfig* ServerConfig::default_instance_ = NULL;

ServerConfig* ServerConfig::New() const {
  return new ServerConfig;
}

void ServerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (clusters_ != NULL) clusters_->::Lux::Config::Clusters::Clear();
    }
    if (_has_bit(1)) {
      if (dispatchers_ != NULL) dispatchers_->::Lux::Config::Dispatchers::Clear();
    }
    if (_has_bit(2)) {
      if (proxy_mergers_ != NULL) proxy_mergers_->::Lux::Config::ProxyMergers::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Lux.Config.Clusters clusters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clusters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dispatchers;
        break;
      }
      
      // optional .Lux.Config.Dispatchers dispatchers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dispatchers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dispatchers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_proxy_mergers;
        break;
      }
      
      // optional .Lux.Config.ProxyMergers proxy_mergers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proxy_mergers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proxy_mergers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Lux.Config.Clusters clusters = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->clusters(), output);
  }
  
  // optional .Lux.Config.Dispatchers dispatchers = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dispatchers(), output);
  }
  
  // optional .Lux.Config.ProxyMergers proxy_mergers = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->proxy_mergers(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Lux.Config.Clusters clusters = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->clusters(), target);
  }
  
  // optional .Lux.Config.Dispatchers dispatchers = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dispatchers(), target);
  }
  
  // optional .Lux.Config.ProxyMergers proxy_mergers = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->proxy_mergers(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Lux.Config.Clusters clusters = 1;
    if (has_clusters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clusters());
    }
    
    // optional .Lux.Config.Dispatchers dispatchers = 2;
    if (has_dispatchers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dispatchers());
    }
    
    // optional .Lux.Config.ProxyMergers proxy_mergers = 3;
    if (has_proxy_mergers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proxy_mergers());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerConfig::MergeFrom(const ServerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_clusters()->::Lux::Config::Clusters::MergeFrom(from.clusters());
    }
    if (from._has_bit(1)) {
      mutable_dispatchers()->::Lux::Config::Dispatchers::MergeFrom(from.dispatchers());
    }
    if (from._has_bit(2)) {
      mutable_proxy_mergers()->::Lux::Config::ProxyMergers::MergeFrom(from.proxy_mergers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfig::CopyFrom(const ServerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_clusters()) {
    if (!this->clusters().IsInitialized()) return false;
  }
  if (has_dispatchers()) {
    if (!this->dispatchers().IsInitialized()) return false;
  }
  if (has_proxy_mergers()) {
    if (!this->proxy_mergers().IsInitialized()) return false;
  }
  return true;
}

void ServerConfig::Swap(ServerConfig* other) {
  if (other != this) {
    std::swap(clusters_, other->clusters_);
    std::swap(dispatchers_, other->dispatchers_);
    std::swap(proxy_mergers_, other->proxy_mergers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerConfig_descriptor_;
  metadata.reflection = ServerConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace Lux

// @@protoc_insertion_point(global_scope)
